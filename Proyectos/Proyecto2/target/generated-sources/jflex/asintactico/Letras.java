/* The following code was generated by JFlex 1.4.3 on 10/3/18, 2:03 AM */

// tokens.flex

package asintactico;
import java.util.Stack;
import java.io.File;
import java.io.FileWriter;
import java.io.BufferedWriter;
import java.io.Reader;
import java.io.IOException;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 10/3/18, 2:03 AM from the specification file
 * <tt>/home/razielmcr/Compiladores/Git/LosBastardosdeTuring/Proyectos/Proyecto2/src/main/jflex/atomos.flex</tt>
 */
public class Letras {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int ATOMOS = 4;
  public static final int ERROR = 6;
  public static final int YYINITIAL = 0;
  public static final int IDENTA = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\20\2\0\1\22\23\0\1\44\1\16\1\23\1\0\1\37"+
    "\2\0\1\45\1\46\1\36\1\34\1\0\1\35\1\15\1\40\1\14"+
    "\11\13\1\21\1\0\1\41\1\43\1\42\7\0\1\7\14\0\1\47"+
    "\1\3\7\0\1\17\2\0\1\1\1\0\1\10\2\0\1\2\1\6"+
    "\1\32\1\0\1\30\1\31\2\0\1\11\1\0\1\24\1\25\1\33"+
    "\1\0\1\4\1\12\1\26\1\5\1\0\1\27\uff88\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\1\3\1\4\1\5\1\6\4\5"+
    "\1\7\2\10\1\5\1\11\1\12\1\13\1\12\1\14"+
    "\2\5\1\6\2\5\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\4\0"+
    "\2\31\1\32\2\0\1\33\1\0\1\34\1\0\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\3\0\1\44"+
    "\1\31\1\25\2\0\1\45\1\46\2\0\1\47\1\50";

  private static int [] zzUnpackAction() {
    int [] result = new int[74];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\50\0\120\0\170\0\240\0\240\0\240\0\240"+
    "\0\240\0\310\0\360\0\u0118\0\u0140\0\u0168\0\240\0\u0190"+
    "\0\u01b8\0\u01e0\0\u0208\0\240\0\240\0\u0230\0\u0258\0\u0280"+
    "\0\u02a8\0\u02d0\0\u02f8\0\u0320\0\u0348\0\240\0\u0370\0\240"+
    "\0\u0398\0\u03c0\0\u03e8\0\u0410\0\u0438\0\240\0\240\0\240"+
    "\0\u0460\0\u0488\0\u04b0\0\u04d8\0\u0500\0\u01e0\0\240\0\u0528"+
    "\0\u0550\0\240\0\u0578\0\240\0\u05a0\0\240\0\240\0\240"+
    "\0\240\0\240\0\240\0\240\0\u05c8\0\u05f0\0\u0618\0\240"+
    "\0\240\0\240\0\u0640\0\u0668\0\240\0\240\0\u0690\0\u06b8"+
    "\0\240\0\240";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[74];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\20\5\1\6\27\5\12\6\1\7\34\6\1\10\1\11"+
    "\1\12\1\11\1\13\2\11\1\14\1\15\1\16\1\11"+
    "\1\17\1\20\1\21\1\22\1\23\1\11\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\11\1\32\1\11\1\33"+
    "\1\11\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\11\50\50\51\0"+
    "\2\12\24\0\1\12\24\0\1\51\54\0\1\52\46\0"+
    "\1\53\63\0\1\54\36\0\2\20\1\55\46\0\1\21"+
    "\1\55\45\0\2\56\33\0\16\23\1\57\1\60\30\23"+
    "\20\0\1\24\27\0\20\27\1\0\27\27\25\0\1\61"+
    "\26\0\1\62\44\0\2\12\24\0\1\12\1\63\51\0"+
    "\1\64\21\0\1\65\106\0\1\66\42\0\1\67\51\0"+
    "\1\70\52\0\1\71\47\0\1\72\47\0\1\73\47\0"+
    "\1\74\11\0\1\75\54\0\1\76\46\0\1\77\40\0"+
    "\1\100\47\0\1\101\45\0\20\23\1\0\27\23\26\0"+
    "\1\102\52\0\1\103\47\0\1\104\24\0\1\105\47\0"+
    "\1\106\53\0\1\75\46\0\1\107\62\0\1\110\31\0"+
    "\1\111\67\0\1\112\21\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[1760];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\5\11\5\1\1\11\4\1\2\11\10\1\1\11"+
    "\1\1\1\11\5\1\3\11\4\0\2\1\1\11\2\0"+
    "\1\11\1\0\1\11\1\0\7\11\3\0\3\11\2\0"+
    "\2\11\2\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[74];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    
    /* Para guardar la secuencia de tokens. */
    private StringBuilder builder = new StringBuilder();
    /* Pila que guarda el numero de identaciones por bloque*/
    private Stack<Integer> pila_global = new Stack<>();
    /* Contador del número de línea actual.*/
    private int no_linea = 1;
    /* Verifica si existe un error de identacion. */
    private boolean error_identa = false;
    /* El nombre del archivo. */
    private String fileName;
     private Parser yyparser;

    public Letras(final String archivo, final Reader reader) {
        this(reader);
        String[] directorios = archivo.split("/");  
        fileName = directorios[directorios.length-1];
        if(fileName.contains(".")) {
            fileName = fileName.split("\\.")[0];
        }
    }
      public Letras(java.io.Reader r, Parser parser){
    	   this(r);
    	   yyparser = parser;
    }


    /**
    * Añade una nueva representanción de un token al {@link StringBuilder}.
    * @param type La cadena con el tipo de token.
    */
    private void nextSymbol(final String type) {
        builder.append(type);
    }

    /**
    * Añade una nueva representación de un token al {@link StringBuilder}.
    * @param type La cadena con el tipo de token.
    * @param value La cadena con el valor del token.
    */
    private void nextSymbol(final String type, final String value) {
        final String tokenWithValue = String.format("%s(%s)", type, value);
        builder.append(tokenWithValue);
    }

    /**
     * Crea un nuevo bloque de identaci&oacute; (representado como un nuevo)
     * elemento en la pila, con el entero de valor 0 (porque llevamos 0 
     * identaciones en el momento que se crea).
     */
    private void newIdenta(){
        pila_global.push(0);
    }

    /**
     * Incrementa el contador de espacios del bloque actual
     */
    private void pushIdenta(){
        int count = pila_global.pop();
        pila_global.push(++count);
    }

    /**
     * Verifica si la siguiente linea pertenece al mismo bloque de identaci&oacute;n
     * esto con el fin de reconocer si es un atomo IDENTA o no, esto se vera reflejado
     * en la pila con un nuevo elmento en el caso de que si fuera una nueva identaci&oacute;n
     * @return el entero que identificara si el atomo es identa o deidenta
     */
    private int isIdenta(){
        int valor = 2;
        int bloque_actual = pila_global.pop();
        if(pila_global.empty()){
            pila_global.push(bloque_actual);
        }else{
            int bloque_anterior = pila_global.peek();
            if(bloque_actual > bloque_anterior){ 
                pila_global.push(bloque_actual);
                nextSymbol("IDENTA",Integer.toString(bloque_actual));
                valor = 0;
        }else if(bloque_actual < bloque_anterior){
            do{
                nextSymbol("DEIDENTA",Integer.toString(bloque_anterior));
                valor = 1;
                pila_global.pop();
                if(!pila_global.empty())
                    bloque_anterior = pila_global.peek();
                    //aqui tambien asumimos que el primer bloque inicia en 0
                else bloque_anterior = 0; 
            } while(bloque_actual < bloque_anterior);
                if(bloque_actual != bloque_anterior) error_identa = true;
            }
        }return valor;
    }

    /**
     * Reporta el error ocurrido.
     * @param type El tipo de error, 0: cadena, 1: Identación 2: Lexema
     */
    private void reportError(int type){
        switch(type){
            case 0:
                nextSymbol("\nERROR de cadena en la linea: ");
                break;
            case 1:
                nextSymbol("\nERROR de Identación en la linea: ");
                break;
            case 2:
                nextSymbol("\nERROR Lexema no encontado en la linea: ");
                break;
        }

        nextSymbol("" + no_linea);
    }
    /**
     * @return si ocurrio un error de identacion
     */
    private boolean errorIdenta(){
        return error_identa;
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Letras(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Letras(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 116) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
        /* Escribimos el resutlado en out y se imprimen. */
    final BufferedWriter writer;
    final FileWriter fileWriter;
    final String fileString = "out/" + fileName + ".plx";
    try {
        final String content = builder.toString();
        final File file = new File(fileString);
        file.getParentFile().mkdirs();
        fileWriter = new FileWriter(file);
        writer = new BufferedWriter(fileWriter);
        writer.write(content);
        writer.close();
        fileWriter.close();
    } catch (IOException e) {
        e.printStackTrace();
        System.err.println("Error al escribir el archivo.");
    }
    System.out.println(builder.toString());
  yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 6: 
          { nextSymbol("IDENTIFICADOR", yytext());    return Parser.IDENTIFICADOR;
          }
        case 41: break;
        case 23: 
          { nextSymbol("PAR_C", yytext());     return Parser.PAR_C;
          }
        case 42: break;
        case 39: 
          { nextSymbol("WHILE", yytext());     return Parser.WHILE;
          }
        case 43: break;
        case 8: 
          { nextSymbol("ENTERO", yytext());   return Parser.ENTERO;
          }
        case 44: break;
        case 15: 
          { nextSymbol("MULT", yytext());      return Parser.MULT;
          }
        case 45: break;
        case 9: 
          { reportError(0);
          }
        case 46: break;
        case 22: 
          { nextSymbol("PAR_O", yytext());     return Parser.PAR_O;
          }
        case 47: break;
        case 11: 
          { nextSymbol("SEPARADOR", yytext());        return Parser.SEPARADOR;
          }
        case 48: break;
        case 35: 
          { nextSymbol("DIST", yytext());      return Parser.DIST;
          }
        case 49: break;
        case 26: 
          { nextSymbol("CADENA", yytext());   return Parser.CADENA;
          }
        case 50: break;
        case 34: 
          { nextSymbol("EQUAL", yytext());     return Parser.EQUAL;
          }
        case 51: break;
        case 7: 
          { /* Ignore */
          }
        case 52: break;
        case 2: 
          { System.out.print(yytext());
          }
        case 53: break;
        case 20: 
          { nextSymbol("ASIG", yytext());      return Parser.ASIG;
          }
        case 54: break;
        case 17: 
          { nextSymbol("DIV", yytext());       return Parser.DIV;
          }
        case 55: break;
        case 37: 
          { nextSymbol("BOOLEAN", yytext());  return Parser.BOOLEANO;
          }
        case 56: break;
        case 5: 
          { reportError(2); nextSymbol(", generado por la cadena: "+yytext()+" "); yybegin(ERROR);
          }
        case 57: break;
        case 21: 
          { nextSymbol("NOT", yytext());       return Parser.NOT;
          }
        case 58: break;
        case 25: 
          { nextSymbol("REAL", yytext());     return Parser.REAL;
          }
        case 59: break;
        case 32: 
          { nextSymbol("BTE", yytext());       return Parser.BTE;
          }
        case 60: break;
        case 14: 
          { nextSymbol("SUB", yytext());       return Parser.SUB;
          }
        case 61: break;
        case 18: 
          { nextSymbol("LT", yytext());        return Parser.LT;
          }
        case 62: break;
        case 27: 
          { nextSymbol("OR", yytext());        return Parser.OR;
          }
        case 63: break;
        case 36: 
          { nextSymbol("AND", yytext());       return Parser.AND;
          }
        case 64: break;
        case 31: 
          { nextSymbol("DIVE", yytext());      return Parser.DIVE;
          }
        case 65: break;
        case 3: 
          { pushIdenta();
          }
        case 66: break;
        case 1: 
          { nextSymbol("\n"); newIdenta(); yypushback(1); yybegin(IDENTA);
          }
        case 67: break;
        case 28: 
          { nextSymbol("IF", yytext());        return Parser.IF;
          }
        case 68: break;
        case 19: 
          { nextSymbol("BT", yytext());        return Parser.BT;
          }
        case 69: break;
        case 30: 
          { nextSymbol("POWER", yytext());     return Parser.POWER;
          }
        case 70: break;
        case 13: 
          { nextSymbol("ADD", yytext());       return Parser.ADD;
          }
        case 71: break;
        case 38: 
          { nextSymbol("ELSE", yytext());      return Parser.ELSE;
          }
        case 72: break;
        case 29: 
          { nextSymbol("INC", yytext());       return Parser.INC;
          }
        case 73: break;
        case 33: 
          { nextSymbol("LTE", yytext());       return Parser.LTE;
          }
        case 74: break;
        case 10: 
          { nextSymbol("SALTO\n"); no_linea++; newIdenta(); yybegin(IDENTA); return Parser.SALTO;
          }
        case 75: break;
        case 16: 
          { nextSymbol("MOD", yytext());       return Parser.MOD;
          }
        case 76: break;
        case 40: 
          { nextSymbol("PRINT", yytext());      return Parser.PRINT;
          }
        case 77: break;
        case 12: 
          { System.out.println("COMENTARIO");
          }
        case 78: break;
        case 24: 
          { /* Detiene la ejecucion */
          }
        case 79: break;
        case 4: 
          { switch(isIdenta()){
            case 0: 
                return Parser.IDENTA;
            case 1:
                return Parser.DEIDENTA;

        }
        if(errorIdenta()){
            reportError(1);
            yybegin(ERROR);
        }else{
            yypushback(1); 
            yybegin(ATOMOS);
        }
          }
        case 80: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return 0; }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Letras <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        Letras scanner = null;
        try {
          scanner = new Letras( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
